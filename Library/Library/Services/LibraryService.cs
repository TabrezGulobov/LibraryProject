using System;
using System.Collections;
using Library.Entites;
using Library.InterFace;

namespace Library.Services;

public class LibraryService
{
    public List<User> RegisteredUsers { get; set; } = new List<User>();
    public static User CurrentUser { get; set; } = null;
    public List<Book> Books { get; set; } = new List<Book>();

    public bool Registration(string username, string password)
    {
        foreach (var user in RegisteredUsers)
        {
            if (user.UserName == username) // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ Equals
            {
                Console.WriteLine("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞–Ω—è—Ç ‚ùå");
                return false;
            }
        }

        var newUser = new User(username, password, Role.User);
        RegisteredUsers.Add(newUser);
        Console.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
        return true;
    }



    public bool Login(string username, string password)
    {
        foreach (var user in RegisteredUsers)
        {
            if (user.UserName == username && user.Password == password)
            {
                Console.WriteLine($"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}‚ùï");
                return true;
            }
            else
            {
                Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—åü§∑");
                return false;
            }
        }

        return true;
    }

    public void GetAccountInfo(string userName)
    {
        foreach (var user in RegisteredUsers)
        {
            if (user.UserName == userName)
            {
                Console.WriteLine($"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –ò–º—è: {userName}, –ü–∞—Ä–æ–ª—å: {user.Password}, –†–æ–ª—å:{user.UserRole}");
            }
            else
            {
                Console.WriteLine("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑");
            }
        }
    }

    public void AddBook(string title, string author, string genre, int year)
    {
        var newBook = new Book(title, author, genre, year);
        Books.Add(newBook);
        Console.WriteLine($"üìö –ö–Ω–∏–≥–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.");
    }

    public void SearchBooks(string title, string author, string genre, int year)
    {
        List<Book> filteredBooks = new List<Book>();

        foreach (var book in Books)
        {
            bool matchesTitle = string.IsNullOrEmpty(title) || book.Title.Equals(title, StringComparison.OrdinalIgnoreCase);
            bool matchesAuthor = string.IsNullOrEmpty(author) || book.Author.Equals(author, StringComparison.OrdinalIgnoreCase);
            bool matchesGenre = string.IsNullOrEmpty(genre) || book.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase);
            bool matchesYear = (year == 0 || book.Year == year);

            if (matchesTitle && matchesAuthor && matchesGenre && matchesYear)
            {
                filteredBooks.Add(book);
            }
        }

        if (filteredBooks.Count == 0)
        {
            Console.WriteLine("‚ùå –¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.");
        }
        else
        {
            Console.WriteLine("üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:");
            foreach (var book in filteredBooks)
            {
                Console.WriteLine($"üìñ {book.Title} - {book.Author} ({book.Genre}, {book.Year})");
            }
        }
    }


    public void BorrowBook(string title, int days)
    {
        if (CurrentUser == null)
        {
            Console.WriteLine("‚ùå –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–Ω–∏–≥—É.");
            return;
        }

        foreach (var book in Books)
        {
            if (book.Title == title)
            {
                Console.WriteLine($"–ö–Ω–∏–≥–∞ '{title}' –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ‚ùï");       
            }
            else
            {
                Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            }
        }
        
    }

    public void ReturnBook(string title)
    {
        if (CurrentUser == null)
        {
            Console.WriteLine("‚ùå –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.");
            return;
        }

        var book = Books.FirstOrDefault(b =>
            b.Title.Equals(title, StringComparison.OrdinalIgnoreCase) && b.Borrower == CurrentUser);
        if (book == null)
        {
            Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
            return;
        }

    }
    public bool IsAdmin()
    {
        return CurrentUser != null && CurrentUser.UserRole == Role.Admin;
    }

}