using System;
using System.Collections.Generic;
using Library.Entities;
using Library.Interfaces;

namespace Library.Services
{
    public class LibraryService : ILibraryService
    {
        public List<User> RegisteredUsers { get; set; } = new List<User>();
        public static User CurrentUser { get; set; } = null;
        public List<Book> Books { get; set; } = new List<Book>();

       
        public bool Registration(string username, string password)
        {
            bool userExists = false;
            foreach (var user in RegisteredUsers)
            {
                if (user.UserName.Equals(username, StringComparison.OrdinalIgnoreCase))
                {
                    userExists = true;
                    break;
                }
            }
            if (userExists)
            {
                Console.WriteLine("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞–Ω—è—Ç ‚ùå");
                return false;
            }

            var newUser = new User(username, password, Role.User);
            RegisteredUsers.Add(newUser);
            Console.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return true;
        }
        
        public bool Login(string username, string password)
        {
            User foundUser = null;
            foreach (var user in RegisteredUsers)
            {
                if (user.UserName.Equals(username, StringComparison.OrdinalIgnoreCase) &&
                    user.Password == password)
                {
                    foundUser = user;
                    break;
                }
            }

            if (foundUser != null)
            {
                CurrentUser = foundUser;
                Console.WriteLine($"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}‚ùï");
                return true;
            }
            else
            {
                Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å ü§∑");
                return false;
            }
        }

        
        public void ListUsers()
        {
            if (CurrentUser == null || CurrentUser.UserRole != Role.Admin)
            {
                Console.WriteLine("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                return;
            }

            Console.WriteLine("–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
            foreach (var user in RegisteredUsers)
            {
                Console.WriteLine($"- {user.UserName} ({user.UserRole})");
            }
        }
        
        public bool DeleteUser(string username)
        {
            if (CurrentUser == null || CurrentUser.UserRole != Role.Admin)
            {
                Console.WriteLine("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                return false;
            }

            User userToDelete = null;
            foreach (var user in RegisteredUsers)
            {
                if (user.UserName.Equals(username, StringComparison.OrdinalIgnoreCase))
                {
                    userToDelete = user;
                    break;
                }
            }

            if (userToDelete == null)
            {
                Console.WriteLine("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return false;
            }

            if (userToDelete.UserRole == Role.Admin)
            {
                Console.WriteLine("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                return false;
            }

            RegisteredUsers.Remove(userToDelete);
            Console.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
            return true;
        }

        
        public void AddBook(string title, string author, string genre, int year)
        {
            var newBook = new Book(title, author, genre, year);
            Books.Add(newBook);
            Console.WriteLine($"üìö –ö–Ω–∏–≥–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.");
        }

        
        public List<Book> SearchBooks(string title, string author, string genre, int year)
        {
            List<Book> filteredBooks = new List<Book>();

            foreach (var book in Books)
            {
                bool matchesTitle = string.IsNullOrEmpty(title) ||
                    book.Title.Equals(title, StringComparison.OrdinalIgnoreCase);
                bool matchesAuthor = string.IsNullOrEmpty(author) ||
                    book.Author.Equals(author, StringComparison.OrdinalIgnoreCase);
                bool matchesGenre = string.IsNullOrEmpty(genre) ||
                    book.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase);
                bool matchesYear = (year == 0 || book.Year == year);

                if (matchesTitle && matchesAuthor && matchesGenre && matchesYear)
                {
                    filteredBooks.Add(book);
                }
            }

            if (filteredBooks.Count == 0)
            {
                Console.WriteLine("‚ùå –¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.");
            }
            else
            {
                Console.WriteLine("üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:");
                foreach (var book in filteredBooks)
                {
                    Console.WriteLine($"üìñ {book.Title} - {book.Author} ({book.Genre}, {book.Year})");
                }
            }

            return filteredBooks;
        }
        
        public void GetBookStatus(string title)
        {
            Book foundBook = null;
            foreach (var book in Books)
            {
                if (book.Title.Equals(title, StringComparison.OrdinalIgnoreCase))
                {
                    foundBook = book;
                    break;
                }
            }

            if (foundBook == null)
            {
                Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                return;
            }

            if (foundBook.IsAvailable)
            {
                Console.WriteLine($"‚úÖ –ö–Ω–∏–≥–∞ '{foundBook.Title}' –¥–æ—Å—Ç—É–ø–Ω–∞.");
            }
            else
            {
                Console.WriteLine($"‚ùó –ö–Ω–∏–≥–∞ '{foundBook.Title}' –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {foundBook.Borrower.UserName}. " +
                                  $"–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {foundBook.DueDate?.ToString("dd.MM.yyyy") ?? "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}");
            }
        }

        
        public List<Book> SortAndFilterBooks(string genre = "")
        {
            List<Book> filteredBooks = new List<Book>();
            
            foreach (var book in Books)
            {
                if (string.IsNullOrEmpty(genre) || book.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase))
                {
                    filteredBooks.Add(book);
                }
            }
            
            filteredBooks.Sort((a, b) => string.Compare(a.Title, b.Title, StringComparison.OrdinalIgnoreCase));

            Console.WriteLine("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:");
            foreach (var book in filteredBooks)
            {
                string status = book.IsAvailable
                    ? "–î–æ—Å—Ç—É–ø–Ω–∞"
                    : $"–í—ã–¥–∞–Ω–∞ ({book.Borrower.UserName}, –¥–æ {book.DueDate?.ToString("dd.MM.yyyy")})";
                Console.WriteLine($"üìñ {book.Title} - {book.Author} ({book.Genre}, {book.Year}) - {status}");
            }

            return filteredBooks;
        }
        
        public void BorrowBook(string title, int days)
        {
            if (CurrentUser == null)
            {
                Console.WriteLine("‚ùå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∫–Ω–∏–≥—É.");
                return;
            }

            Book foundBook = null;
            foreach (var book in Books)
            {
                if (book.Title.Equals(title, StringComparison.OrdinalIgnoreCase))
                {
                    foundBook = book;
                    break;
                }
            }

            if (foundBook == null)
            {
                Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.");
                return;
            }

            if (!foundBook.IsAvailable)
            {
                Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
                return;
            }

            foundBook.IsAvailable = false;
            foundBook.Borrower = CurrentUser;
            foundBook.DueDate = DateTime.Now.AddDays(days);
            Console.WriteLine($"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫–Ω–∏–≥—É '{foundBook.Title}'. " +
                              $"–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {foundBook.DueDate?.ToString("dd.MM.yyyy")}");
        }
        
        public void ReturnBook(string title)
        {
            if (CurrentUser == null)
            {
                Console.WriteLine("‚ùå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É.");
                return;
            }

            Book foundBook = null;
            foreach (var book in Books)
            {
                if (book.Title.Equals(title, StringComparison.OrdinalIgnoreCase) && book.Borrower == CurrentUser)
                {
                    foundBook = book;
                    break;
                }
            }

            if (foundBook == null)
            {
                Console.WriteLine("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
                return;
            }

            if (foundBook.DueDate.HasValue && DateTime.Now > foundBook.DueDate.Value)
            {
                int overdueDays = (DateTime.Now - foundBook.DueDate.Value).Days;
                decimal fine = overdueDays * 1; // –®—Ç—Ä–∞—Ñ 1 —É.–µ. –∑–∞ –¥–µ–Ω—å
                Console.WriteLine($"‚ö† –ö–Ω–∏–≥–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {overdueDays} –¥–Ω. –í–∞—à —à—Ç—Ä–∞—Ñ: {fine} —É.–µ.");
            }
            else
            {
                Console.WriteLine("‚úÖ –ö–Ω–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è.");
            }

            foundBook.IsAvailable = true;
            foundBook.Borrower = null;
            foundBook.DueDate = null;
        }
    }
}
